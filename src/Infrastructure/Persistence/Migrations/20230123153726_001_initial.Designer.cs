// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.DataContext;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(UniDbContext))]
    [Migration("20230123153726_001_initial")]
    partial class _001initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Advisor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id")
                        .HasName("PK__Advisors__3213E83F77C186F2");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Advisors");
                });

            modelBuilder.Entity("Domain.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("teacher_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK__Announce__3213E83FD8876D20");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Domain.Entities.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("class_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool>("Present")
                        .HasColumnType("bit")
                        .HasColumnName("present");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("PK__Attendan__3213E83FC5730306");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendance", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BookstoreInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("author");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("publisher");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PK__Bookstor__3213E83F2421312E");

                    b.HasIndex("CourseId");

                    b.ToTable("BookstoreInventory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BookstoreOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total");

                    b.HasKey("Id")
                        .HasName("PK__Bookstor__3213E83FFDA1D140");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("BookstoreOrders");
                });

            modelBuilder.Entity("Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("semester");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("PK__Classes__3213E83F45FA4B57");

                    b.HasIndex("CourseId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Domain.Entities.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<Guid?>("PresidentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("president");

                    b.HasKey("Id")
                        .HasName("PK__Clubs__3213E83F21050034");

                    b.HasIndex("PresidentId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("Domain.Entities.ClubMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClubId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("club_id");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("PK__ClubMemb__3213E83FC31F831E");

                    b.HasIndex("ClubId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClubMembership", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Credits")
                        .HasColumnType("int")
                        .HasColumnName("credits");

                    b.Property<Guid?>("InstructorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("instructor");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Courses__3213E83FDF56B220");

                    b.HasIndex("InstructorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Domain.Entities.Degree", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Degrees__3213E83FBCAAF6D5");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("Domain.Entities.DegreeRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<Guid?>("DegreeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("degree");

                    b.HasKey("Id")
                        .HasName("PK__DegreeRe__3213E83FFE8D7CC4");

                    b.HasIndex("CourseId");

                    b.HasIndex("DegreeId");

                    b.ToTable("DegreeRequirements");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Departme__3213E83F120E63C0");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("PK__Events__3213E83F7515042C");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Domain.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK__Exams__3213E83FE69A249A");

                    b.HasIndex("CourseId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Domain.Entities.ExamScore", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("exam_id");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("score");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("PK__ExamScor__3213E83FCDD13984");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("ExamScores");
                });

            modelBuilder.Entity("Domain.Entities.FinancialAid", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK__Financia__3213E83F13765A52");

                    b.HasIndex("StudentId");

                    b.ToTable("FinancialAid", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Housing", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int")
                        .HasColumnName("room_number");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK__Housing__3213E83F27BE2FF5");

                    b.HasIndex("StudentId");

                    b.ToTable("Housing", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MealPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("student_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK__MealPlan__3213E83FC5E9C8A1");

                    b.HasIndex("StudentId");

                    b.ToTable("MealPlans");
                });

            modelBuilder.Entity("Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("course_id");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Resource__3213E83F70704A29");

                    b.HasIndex("CourseId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("DegreeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("degree");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<Guid?>("MajorDepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("major");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("PK__Students__3213E83FDE006724");

                    b.HasIndex("DegreeId");

                    b.HasIndex("MajorDepartmentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("department");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("PK__Teachers__3213E83FF2FBF0BC");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Domain.Entities.Advisor", b =>
                {
                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("Advisors")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Advisors__studen__619B8048");

                    b.HasOne("Domain.Entities.Teacher", "Teacher")
                        .WithMany("Advisors")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK__Advisors__teache__628FA481");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Entities.Announcement", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Announcements")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Announcem__cours__6C190EBB");

                    b.HasOne("Domain.Entities.Teacher", "Teacher")
                        .WithMany("Announcements")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK__Announcem__teach__6D0D32F4");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Entities.Attendance", b =>
                {
                    b.HasOne("Domain.Entities.Class", "Class")
                        .WithMany("Attendances")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK__Attendanc__class__59FA5E80");

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Attendanc__stude__59063A47");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.BookstoreInventory", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("BookstoreInventories")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Bookstore__cours__07C12930");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entities.BookstoreOrder", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("BookstoreOrders")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Bookstore__cours__04E4BC85");

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("BookstoreOrders")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Bookstore__stude__03F0984C");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Class", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Classes__course___5629CD9C");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entities.Club", b =>
                {
                    b.HasOne("Domain.Entities.Student", "PresidentNavigation")
                        .WithMany("Clubs")
                        .HasForeignKey("PresidentId")
                        .HasConstraintName("FK__Clubs__president__74AE54BC");

                    b.Navigation("PresidentNavigation");
                });

            modelBuilder.Entity("Domain.Entities.ClubMembership", b =>
                {
                    b.HasOne("Domain.Entities.Club", "Club")
                        .WithMany("ClubMemberships")
                        .HasForeignKey("ClubId")
                        .HasConstraintName("FK__ClubMembe__club___787EE5A0");

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("ClubMemberships")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__ClubMembe__stude__778AC167");

                    b.Navigation("Club");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.HasOne("Domain.Entities.Teacher", "InstructorNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK__Courses__instruc__534D60F1");

                    b.Navigation("InstructorNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Degree", b =>
                {
                    b.HasOne("Domain.Entities.Department", "DepartmentNavigation")
                        .WithMany("Degrees")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__Degrees__departm__49C3F6B7");

                    b.Navigation("DepartmentNavigation");
                });

            modelBuilder.Entity("Domain.Entities.DegreeRequirement", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("DegreeRequirements")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__DegreeReq__cours__5EBF139D");

                    b.HasOne("Domain.Entities.Degree", "DegreeNavigation")
                        .WithMany("DegreeRequirements")
                        .HasForeignKey("DegreeId")
                        .HasConstraintName("FK__DegreeReq__degre__5DCAEF64");

                    b.Navigation("Course");

                    b.Navigation("DegreeNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Exam", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Exams__course_id__656C112C");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entities.ExamScore", b =>
                {
                    b.HasOne("Domain.Entities.Exam", "Exam")
                        .WithMany("ExamScores")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK__ExamScore__exam___693CA210");

                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("ExamScores")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__ExamScore__stude__68487DD7");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.FinancialAid", b =>
                {
                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("FinancialAids")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Financial__stude__7B5B524B");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Housing", b =>
                {
                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("Housings")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Housing__student__7E37BEF6");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.MealPlan", b =>
                {
                    b.HasOne("Domain.Entities.Student", "Student")
                        .WithMany("MealPlans")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__MealPlans__stude__01142BA1");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Resource", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Resources")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Resources__cours__6FE99F9F");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.HasOne("Domain.Entities.Degree", "DegreeNavigation")
                        .WithMany("Students")
                        .HasForeignKey("DegreeId")
                        .HasConstraintName("FK__Students__degree__4D94879B");

                    b.HasOne("Domain.Entities.Department", "MajorNavigation")
                        .WithMany("Students")
                        .HasForeignKey("MajorDepartmentId")
                        .HasConstraintName("FK__Students__major__4CA06362");

                    b.Navigation("DegreeNavigation");

                    b.Navigation("MajorNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.HasOne("Domain.Entities.Department", "DepartmentNavigation")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__Teachers__depart__5070F446");

                    b.Navigation("DepartmentNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Class", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("Domain.Entities.Club", b =>
                {
                    b.Navigation("ClubMemberships");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("BookstoreInventories");

                    b.Navigation("BookstoreOrders");

                    b.Navigation("Classes");

                    b.Navigation("DegreeRequirements");

                    b.Navigation("Exams");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Domain.Entities.Degree", b =>
                {
                    b.Navigation("DegreeRequirements");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Domain.Entities.Department", b =>
                {
                    b.Navigation("Degrees");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Domain.Entities.Exam", b =>
                {
                    b.Navigation("ExamScores");
                });

            modelBuilder.Entity("Domain.Entities.Student", b =>
                {
                    b.Navigation("Advisors");

                    b.Navigation("Attendances");

                    b.Navigation("BookstoreOrders");

                    b.Navigation("ClubMemberships");

                    b.Navigation("Clubs");

                    b.Navigation("ExamScores");

                    b.Navigation("FinancialAids");

                    b.Navigation("Housings");

                    b.Navigation("MealPlans");
                });

            modelBuilder.Entity("Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Advisors");

                    b.Navigation("Announcements");

                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
